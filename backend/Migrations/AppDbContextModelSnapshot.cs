// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("backend.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrdinanceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TempleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AppointmentId");

                    b.HasIndex("OrdinanceId");

                    b.HasIndex("TempleId");

                    b.HasIndex("UserName");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("backend.Models.AvailableAppointment", b =>
                {
                    b.Property<int>("AvailableAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrdinanceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TempleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("AvailableAppointmentId");

                    b.HasIndex("OrdinanceId");

                    b.HasIndex("TempleId");

                    b.ToTable("AvailableAppointments");
                });

            modelBuilder.Entity("backend.Models.Companion", b =>
                {
                    b.Property<int>("CompanionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipRecordNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompanionId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MembershipRecordNumber");

                    b.ToTable("Companions");
                });

            modelBuilder.Entity("backend.Models.FamilyMember", b =>
                {
                    b.Property<int>("FamilyMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipRecordNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelatedMembershipRecordNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelationshipId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FamilyMemberId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("backend.Models.Member", b =>
                {
                    b.Property<int>("MembershipRecordNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("FamilyMemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HomeStake")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecommendExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RecommendIssueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecommendStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TempleDistrict")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WardContactWardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MembershipRecordNumber");

                    b.HasIndex("FamilyMemberId")
                        .IsUnique();

                    b.HasIndex("WardContactWardId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("backend.Models.Ordinance", b =>
                {
                    b.Property<int>("OrdinanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrdinanceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("OrdinanceId");

                    b.ToTable("Ordinances");
                });

            modelBuilder.Entity("backend.Models.Relationship", b =>
                {
                    b.Property<int>("RelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelationshipName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RelationshipId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("backend.Models.Temple", b =>
                {
                    b.Property<int>("TempleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TempleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TempleId");

                    b.ToTable("Temples");
                });

            modelBuilder.Entity("backend.Models.UserAccount", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MembershipRecordNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MembershipRecordNumber1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserName");

                    b.HasIndex("MembershipRecordNumber1");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("backend.Models.WardContact", b =>
                {
                    b.Property<int>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactCalling")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactFirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactLastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WardId");

                    b.ToTable("WardContacts");
                });

            modelBuilder.Entity("backend.Models.Appointment", b =>
                {
                    b.HasOne("backend.Models.Ordinance", "Ordinance")
                        .WithMany()
                        .HasForeignKey("OrdinanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Temple", "Temple")
                        .WithMany()
                        .HasForeignKey("TempleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ordinance");

                    b.Navigation("Temple");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("backend.Models.AvailableAppointment", b =>
                {
                    b.HasOne("backend.Models.Ordinance", "Ordinance")
                        .WithMany()
                        .HasForeignKey("OrdinanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Temple", "Temple")
                        .WithMany()
                        .HasForeignKey("TempleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ordinance");

                    b.Navigation("Temple");
                });

            modelBuilder.Entity("backend.Models.Companion", b =>
                {
                    b.HasOne("backend.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MembershipRecordNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("backend.Models.Member", b =>
                {
                    b.HasOne("backend.Models.FamilyMember", "FamilyMember")
                        .WithOne("Member")
                        .HasForeignKey("backend.Models.Member", "FamilyMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.WardContact", "WardContact")
                        .WithMany()
                        .HasForeignKey("WardContactWardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyMember");

                    b.Navigation("WardContact");
                });

            modelBuilder.Entity("backend.Models.UserAccount", b =>
                {
                    b.HasOne("backend.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MembershipRecordNumber1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("backend.Models.FamilyMember", b =>
                {
                    b.Navigation("Member")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
